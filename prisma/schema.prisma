generator client {
  provider = "prisma-client-js"
  output = "./src/generated/prisma"
  engineType = "client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model customers {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  last_name  String?   @db.VarChar(255)
  address    String?   @db.VarChar(255)
  email      String?   @unique(map: "customers_email_unique") @db.VarChar(255)
  phone      String?   @db.VarChar(255)
  is_regular Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  sales      sales[]
}

model embazado_records {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([id], map: "embazado_records_product_id_foreign")
  @@index([user_id], map: "embazado_records_user_id_foreign")
}

model failed_jobs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model invoices {
  id             Int       @id @default(autoincrement())
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  supplier_id    Int
  invoice_number String    @unique(map: "invoices_invoice_number_unique") @db.VarChar(255)
  issue_date     DateTime  @db.Date
  total_amount   Decimal   @db.Decimal(10, 2)
  status         String    @default("pending") @db.VarChar(255)

  @@index([supplier_id], map: "invoices_supplier_id_foreign")
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           Int    @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             Int       @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   Int
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model plant_pot_prices {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  product_id Int
  pot_size   String    @db.VarChar(255)
  price      Decimal   @db.Decimal(8, 2)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([product_id], map: "plant_pot_prices_product_id_foreign")
}

model products {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  category      String       @db.VarChar(255)
  description   String?      @db.Text
  image_url     String?      @db.VarChar(255)
  precio_venta  Decimal      @db.Decimal(10, 2)
  stock         Int          @default(0)
  pot_size      String?      @db.VarChar(255)
  created_at    DateTime?    @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
  precio_compra Decimal      @default(0.00) @db.Decimal(10, 2)
  publicado     Boolean      @default(true)
  sku           String?      @unique(map: "products_sku_unique") @db.VarChar(50)
  sale_items    sale_items[]
}

model purchases {
  id             Int       @id @default(autoincrement())
  supplier_id    Int
  quantity       Int
  purchase_price Decimal   @db.Decimal(10, 2)
  purchase_date  DateTime  @db.Date
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  invoice_id     Int?

  @@index([invoice_id], map: "purchases_invoice_id_foreign")
  @@index([supplier_id], map: "purchases_supplier_id_foreign")
}

model rewards {
  id              Int       @id @default(autoincrement())
  customer_id     Int
  reward_type     String    @db.VarChar(255)
  reward_value    Decimal   @db.Decimal(8, 2)
  week_start_date DateTime  @db.Date
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([customer_id], map: "rewards_customer_id_foreign")
}

model sales {
  id          Int         @id @default(autoincrement())
  user_id     Int
  customer_id Int?
  customer    String      @db.VarChar(255)
  email       String?     @db.VarChar(255)
  seller      String      @db.VarChar(255)
  date        DateTime    @db.Date
  time        DateTime?   @db.Time(0)
  status      String      @default("Pendiente") @db.VarChar(255)
  total_price Decimal     @default(0.00) @db.Decimal(10, 2)
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  sale_items  sale_items[] // Relaci√≥n uno-a-muchos con sale_items
  user        users       @relation(fields: [user_id], references: [id], onDelete: Restrict)
  customer_ref customers?  @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  @@index([customer_id], map: "sales_customer_id_foreign")
  @@index([user_id], map: "sales_user_id_foreign")
}

model sale_items {
  id         Int       @id @default(autoincrement())
  sale_id    Int
  product_id Int
  quantity   Int
  unit_price Decimal   @db.Decimal(10, 2)
  subtotal   Decimal   @db.Decimal(10, 2)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  sale       sales     @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product    products  @relation(fields: [product_id], references: [id], onDelete: Restrict)
  @@index([sale_id], map: "sale_items_sale_id_foreign")
  @@index([product_id], map: "sale_items_product_id_foreign")
}
model sessions {
  id            String  @id @db.VarChar(255)
  user_id       Int?
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model supplier_prices {
  id             Int       @id @default(autoincrement())
  product_id     Int
  supplier_id    Int
  purchase_price Decimal   @db.Decimal(8, 2)
  valid_from     DateTime  @db.Date
  valid_to       DateTime? @db.Date
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([product_id], map: "supplier_prices_product_id_foreign")
  @@index([supplier_id], map: "supplier_prices_supplier_id_foreign")
}

model suppliers {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  last_name    String    @db.VarChar(255)
  phone        String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  company_name String?   @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model users {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  role              String    @default("operario") @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  sales             sales[]
}
